// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BetTrackerDbContext))]
    partial class BetTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Bankroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("StandardUnit")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateOnly>("StartedAt")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Bankrolls");
                });

            modelBuilder.Entity("Domain.Models.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankrollId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BettingMarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PreMatch")
                        .HasColumnType("bit");

                    b.Property<bool>("Settled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TipsterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalReturn")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal>("TotalStake")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BankrollId");

                    b.HasIndex("BettingMarketId");

                    b.HasIndex("TipsterId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Domain.Models.BettingMarket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Sport")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("BettingMarket");
                });

            modelBuilder.Entity("Domain.Models.Pick", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Odd")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int>("Sport")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.ToTable("Pick");
                });

            modelBuilder.Entity("Domain.Models.Tipster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Tipster");
                });

            modelBuilder.Entity("Domain.Models.Bet", b =>
                {
                    b.HasOne("Domain.Models.Bankroll", "Bankroll")
                        .WithMany("Bets")
                        .HasForeignKey("BankrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.BettingMarket", "BettingMarket")
                        .WithMany()
                        .HasForeignKey("BettingMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Tipster", "Tipster")
                        .WithMany("Bets")
                        .HasForeignKey("TipsterId");

                    b.Navigation("Bankroll");

                    b.Navigation("BettingMarket");

                    b.Navigation("Tipster");
                });

            modelBuilder.Entity("Domain.Models.Pick", b =>
                {
                    b.HasOne("Domain.Models.Bet", "Bet")
                        .WithMany("Picks")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");
                });

            modelBuilder.Entity("Domain.Models.Bankroll", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("Domain.Models.Bet", b =>
                {
                    b.Navigation("Picks");
                });

            modelBuilder.Entity("Domain.Models.Tipster", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
